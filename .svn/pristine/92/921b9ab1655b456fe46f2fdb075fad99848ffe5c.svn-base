using System;
using GenerateTables.Models;
using ServerAPI.ViewModels;
using System.Collections.Generic;
using System.Linq;
using ServerAPI.Utilities;
using Microsoft.AspNetCore.Http;

// ReSharper disable once CheckNamespace
namespace ServerAPI.Services
{
    public class MoneyDepositVerifyService : IMoneyDepositVerifyService
    {
        private readonly AAtims _context;
        private readonly int _personnelId;
        private readonly IMoneyBalanceDebitCheck _moneyBalanceDebitCheck;

        private readonly IMoneyService _moneyService;

        private readonly IMoneyBalanceInmateService _moneyBalanceInmateService;



        public MoneyDepositVerifyService(AAtims context, IHttpContextAccessor httpContextAccessor, IMoneyBalanceDebitCheck moneyBalanceDebitCheck, IMoneyService moneyService, IMoneyBalanceInmateService moneyBalanceInmateService)
        {
            _context = context;
            _personnelId = Convert.ToInt32(httpContextAccessor.HttpContext.User.FindFirst("personnelId")?.Value);
            _moneyBalanceDebitCheck = moneyBalanceDebitCheck;
            _moneyService = moneyService;
            _moneyBalanceInmateService = moneyBalanceInmateService;
        }

        public MoneyDepositoryDetailVm GetMoneyDepositoryDetails()
        {
            MoneyDepositoryDetailVm moneyDepositoryVerifyDetailVm = new MoneyDepositoryDetailVm();
            {
                moneyDepositoryVerifyDetailVm.BankDetails = _moneyService.MoneyGetBank();
                moneyDepositoryVerifyDetailVm.FundDetails = _moneyService.MoneyGetFund();
                moneyDepositoryVerifyDetailVm.DepositoryDetails = _moneyService.MoneyGetDeposit();
            }

            moneyDepositoryVerifyDetailVm.VaultDetails = _context.AccountAoCashBalance
                .Where(w => w.VaultFlag && !w.InactiveFlag)
                .Select(s => new MoneyCashBalanceVm
                {
                    MoneyCashBalanceId = s.AccountAoCashBalanceId,
                    CashDrawerName = s.Name,
                    BalanceAmount = s.CurrentBalance ?? default,
                    MinimumBalance = s.MinimumBalance ?? default,
                    FacilityId = s.FacilityId
                }).ToList();

            return moneyDepositoryVerifyDetailVm;
        }
        public MoneyDepositoryDetailVm GetMoneyDepositoryVerifyDetails(int bankId, int accountAoDepositoryId, int fundId, int personnelId)
        {

            MoneyDepositoryDetailVm moneyDepositoryVerifyDetailVm = new MoneyDepositoryDetailVm();
            {
                moneyDepositoryVerifyDetailVm.MoneyDepositoryDetail = _context.AccountAoReceive
                .Where(w => w.AccountAoFund.AccountAoBankId == bankId &&
                           w.AccountAoDepositoryId == accountAoDepositoryId
                           && !w.TransactionVerified.HasValue &&
                           (w.TransactionVoidFlag == 0 || !w.TransactionVoidFlag.HasValue) &&
                            (fundId == 0 || w.AccountAoFundId == fundId) &&
                            (personnelId == 0 || w.TransactionOfficerId == personnelId))
                   .Select(s => new MoneyDepositoryVm
                   {
                       TransactionId = s.AccountAoReceiveId,
                       TransactionDate = s.TransactionDate,
                       Description = s.TransactionDescription,
                       TransactionReceipt = s.TransactionReceipt,
                       InmateNumber = s.Inmate.InmateNumber,
                       Amount = s.TransactionAmount ?? 0,
                       VerifyFlag = s.AccountAoFund.FundBlindVerify == 1,
                       FundId = s.AccountAoFund.AccountAoFundId,
                       InmateId = s.InmateId ?? 0,
                       PersonId = s.Inmate.Person.PersonId,
                       VoidFlag = s.TransactionVoidFlag == 1,
                       CashFlag = s.TransactionReceiveCashFlag == 1,
                       PersonDetails = new PersonInfoVm
                       {
                           PersonLastName = s.Inmate.Person.PersonLastName,
                           PersonFirstName = s.Inmate.Person.PersonFirstName,
                           PersonMiddleName = s.Inmate.Person.PersonMiddleName,
                           PersonSuffix = s.Inmate.Person.PersonSuffix,
                       },
                       PersonnelDetails = new PersonnelVm
                       {
                           OfficerBadgeNumber = s.TransactionOfficer.OfficerBadgeNumber,
                           PersonLastName = s.TransactionOfficer.PersonNavigation.PersonLastName,
                           PersonFirstName = s.TransactionOfficer.PersonNavigation.PersonFirstName,
                           PersonMiddleName = s.TransactionOfficer.PersonNavigation.PersonMiddleName,
                           PersonnelId = s.TransactionOfficerId
                       }
                   }).OrderByDescending(o => o.TransactionId).ToList();             

              

                moneyDepositoryVerifyDetailVm.PersonnelCountDetails = moneyDepositoryVerifyDetailVm.MoneyDepositoryDetail
                .GroupBy(g => new { g.PersonnelDetails.PersonnelId, g.PersonnelDetails.PersonFirstName, g.PersonnelDetails.PersonLastName, g.PersonnelDetails.OfficerBadgeNumber })
                .Select(s => new PersonnelCountVm
                {
                    PersonnelId = s.Key.PersonnelId,
                    PersonnelFirstName = s.Key.PersonFirstName,
                    PersonnelLastName = s.Key.PersonLastName,
                    OfficerBadgeNumber = s.Key.OfficerBadgeNumber,
                    Count = s.Count()

                }).ToList();

                return moneyDepositoryVerifyDetailVm;

            }
        }

        public int MoneyDepositoryVerify(List<MoneyDepositoryVm> feeList)
        {
            foreach (MoneyDepositoryVm item in feeList)
            {     
                MoneyDepository(item);
            }
            return _context.SaveChanges();
        }

        public void MoneyDepository(MoneyDepositoryVm fee)
        {
            AccountAoReceive accountAo = _context.AccountAoReceive.Find(fee.TransactionId);
            int receiveId;
            if (!fee.AdjustFlag)
            {
                accountAo.TransactionVerified = 1;
                accountAo.TransactionVerifiedDate = DateTime.Now;
                accountAo.TransactionVerifiedBy = _personnelId;
                accountAo.UpdatedBy = _personnelId;
                accountAo.UpdateDate = DateTime.Now;
                _context.SaveChanges();
                receiveId = fee.TransactionId;
            }
            else
            {
                accountAo.TransactionVoidFlag = 1;
                accountAo.TransactionVoidBy = _personnelId;
                accountAo.TransactionVoidDate = DateTime.Now;
                accountAo.UpdatedBy = _personnelId;
                accountAo.UpdateDate = DateTime.Now;
                _context.SaveChanges();
                MoneyTransactionCalculateVm objParam = new MoneyTransactionCalculateVm();
                    objParam.BankId = fee.BankId;
                    objParam.FundId = fee.FundId;
                    objParam.InmateId = fee.InmateId;
                    objParam.TransactionAmount = accountAo.TransactionAmount ?? 0;
                    objParam.TransactionType = MoneyTransactionType.DEBIT;
                    objParam.Table = MoneyTransactionTable.ACCOUNTAO_RECEIVE;
                MoneyBalanceVm objupdate = _moneyBalanceDebitCheck.MoneyTransactionCalculateBalance(objParam);
                    objupdate.InmateId = fee.InmateId;
                    objupdate.BankId = fee.BankId;
                    objupdate.FundId = fee.FundId;
                    objupdate.Table = MoneyTransactionTable.ACCOUNTAO_RECEIVE;
                _moneyBalanceDebitCheck.MoneyUpdateBalance(objupdate);
                        MoneyTransactionCalculateVm objParamCredit = new MoneyTransactionCalculateVm();
                            objParamCredit.BankId = fee.BankId;
                            objParamCredit.FundId = fee.FundId;
                            objParamCredit.InmateId = fee.InmateId;
                            objParamCredit.TransactionAmount = fee.VerifyAmount;
                            objParamCredit.TransactionType = MoneyTransactionType.CREDIT;
                            objParamCredit.Table = MoneyTransactionTable.ACCOUNTAO_RECEIVE;
                        MoneyBalanceVm objParamUpdateCredit = _moneyBalanceDebitCheck.MoneyTransactionCalculateBalance(objParamCredit);
                            objParamUpdateCredit.InmateId = fee.InmateId;
                            objParamUpdateCredit.BankId = fee.BankId;
                            objParamUpdateCredit.FundId = fee.FundId;
                            objParamUpdateCredit.Table = MoneyTransactionTable.ACCOUNTAO_RECEIVE;
                        _moneyBalanceDebitCheck.MoneyUpdateBalance(objParamUpdateCredit);
                    // Insert new record in AccountAO_Receive with verified amount
                    AccountAoReceive accountAoReceiveObj = new AccountAoReceive();
                    accountAoReceiveObj.InmateId = accountAo.InmateId;
                    accountAoReceiveObj.AccountAoFundId = accountAo.AccountAoFundId;
                    accountAoReceiveObj.AccountAoDepositoryId = accountAo.AccountAoDepositoryId;
                    accountAoReceiveObj.CreateDate = accountAo.CreateDate;
                    accountAoReceiveObj.UpdateDate = accountAo.UpdateDate;
                    accountAoReceiveObj.CreatedBy = accountAo.CreatedBy;
                    accountAoReceiveObj.UpdatedBy = accountAo.UpdatedBy;
                    accountAoReceiveObj.TransactionOfficerId = accountAo.TransactionOfficerId;
                    accountAoReceiveObj.TransactionDate = accountAo.TransactionDate;
                    accountAoReceiveObj.TransactionType = accountAo.TransactionType;
                    accountAoReceiveObj.TransactionDescription = accountAo.TransactionDescription;
                    accountAoReceiveObj.TransactionReceiveCashFlag = accountAo.TransactionReceiveCashFlag;
                    accountAoReceiveObj.TransactionReceiveNumber = accountAo.TransactionReceiveNumber;
                    accountAoReceiveObj.TransactionReceiveFrom = accountAo.TransactionReceiveFrom;
                    accountAoReceiveObj.TransactionReceipt = accountAo.TransactionReceipt;
                    accountAoReceiveObj.TransactionVerifiedBy = _personnelId;
                    accountAoReceiveObj.TransactionVerified = 1;
                    accountAoReceiveObj.TransactionVerifiedDate = DateTime.Now;
                    accountAoReceiveObj.TransactionAmount = fee.VerifyAmount;
                    accountAoReceiveObj.UpdatedBy = _personnelId;
                    accountAoReceiveObj.UpdateDate = DateTime.Now;
                    accountAoReceiveObj.AdjustmentAccountAoReceiveId = fee.TransactionId;
                    accountAoReceiveObj.BalanceInmatePending = objParamUpdateCredit.InmateBalance;
                    accountAoReceiveObj.BalanceFundPending = objParamUpdateCredit.FundBalance;
                    accountAoReceiveObj.BalanceAccountPending = objParamUpdateCredit.BankBalance;
                    _context.AccountAoReceive.Add(accountAoReceiveObj);
                    _context.SaveChanges();
                    receiveId = accountAoReceiveObj.AccountAoReceiveId;
            }
                            MoneyTransactionCalculateVm objParamDebit = new MoneyTransactionCalculateVm();
                                objParamDebit.BankId = fee.BankId;
                                objParamDebit.FundId = fee.FundId;
                                objParamDebit.InmateId = fee.InmateId;
                                objParamDebit.TransactionAmount = fee.VerifyAmount;
                                objParamDebit.TransactionType = MoneyTransactionType.DEBIT;
                                objParamDebit.Table = MoneyTransactionTable.ACCOUNTAO_RECEIVE;
                            MoneyBalanceVm balanceDetails = _moneyBalanceDebitCheck.MoneyTransactionCalculateBalance(objParamDebit);
                                balanceDetails.InmateId = fee.InmateId;
                                balanceDetails.BankId = fee.BankId;
                                balanceDetails.FundId = fee.FundId;
                                balanceDetails.Table = MoneyTransactionTable.ACCOUNTAO_RECEIVE;
                            _moneyBalanceDebitCheck.MoneyUpdateBalance(balanceDetails);
                            AccountAoTransaction aoTransDebit = new AccountAoTransaction();
                            if(fee.VaultId > 0)
                            {
                                AccountAoCashBalance aoCashBalance = _context.AccountAoCashBalance.Find(fee.VaultId);
                                    aoCashBalance.CurrentBalance = aoCashBalance.CurrentBalance !=null 
                                    ? aoCashBalance.CurrentBalance + fee.VerifyAmount:
                                    fee.VerifyAmount;
                                    _context.SaveChanges();
                                AccountAoCashDrawer aoCash = new AccountAoCashDrawer();
                                    aoCash.BalanceCashDrawer = aoCash.BalanceCashDrawer + fee.VerifyAmount;
                                    aoCash.CashBalanceId = aoCashBalance.AccountAoCashBalanceId;
                                    aoCash.InmateId = fee.InmateId;
                                    aoCash.TransactionAmount = fee.VerifyAmount;
                                    aoCash.TransactionType = MoneyTransactionType.CREDIT.ToString();
                                    aoCash.TransactionDate = DateTime.Now;
                                    aoCash.TransactionOfficerId = _personnelId;
                                    aoCash.CreatedBy = _personnelId;
                                    aoCash.CreateDate = DateTime.Now;
                                    aoCash.UpdatedBy = _personnelId;
                                    aoCash.UpdateDate = DateTime.Now;
                                    _context.AccountAoCashDrawer.Add(aoCash);
                                    _context.SaveChanges(); 
                                int welfareFundId = _context.AccountAoFund.Single(s=>s.FundWelfareOnlyFlag == 1 && s.Inactive == 0 
                                && s.AccountAoBankId == fee.BankId).AccountAoFundId;
                                MoneyTransactionCalculateVm balanceParam = new MoneyTransactionCalculateVm();
                                    balanceParam.InmateId = fee.InmateId;
                                    balanceParam.BankId = fee.BankId;
                                    balanceParam.FundId = welfareFundId;
                                    balanceParam.TransactionAmount = fee.VerifyAmount;
                                    balanceParam.TransactionType = MoneyTransactionType.DEBIT;
                                    balanceParam.Table = MoneyTransactionTable.ACCOUNTAO_TRANSACTION;
                                MoneyBalanceVm objDebit = _moneyBalanceDebitCheck.MoneyTransactionCalculateBalance(balanceParam);
                                    objDebit.InmateId = 0;
                                    objDebit.BankId = fee.BankId;
                                    objDebit.FundId = welfareFundId;
                                    objDebit.Table = MoneyTransactionTable.ACCOUNTAO_TRANSACTION;
                                _moneyBalanceDebitCheck.MoneyUpdateBalance(objDebit);
                                    
                                    aoTransDebit.AccountAoFundId = welfareFundId;
                                    aoTransDebit.BalanceAccount = objDebit.BankBalance;
                                    aoTransDebit.BalanceFund = objDebit.FundBalance;
                                    aoTransDebit.BalanceInmate = objDebit.InmateBalance;
                                    aoTransDebit.TransactionAmount = -1 * Math.Abs(fee.VerifyAmount);
                                    aoTransDebit.TransactionType = MoneyTransactionType.DEBIT.ToString();
                                    aoTransDebit.CreatedBy = _personnelId;
                                    aoTransDebit.CreateDate = DateTime.Now;
                                    aoTransDebit.TransactionDate = DateTime.Now;
                                    aoTransDebit.TransactionOfficerId = _personnelId;
                                    aoTransDebit.UpdatedBy = _personnelId;
                                    aoTransDebit.UpdateDate = DateTime.Now;
                                    _context.AccountAoTransaction.Add(aoTransDebit);
                                    _context.SaveChanges();
                            }
                            MoneyTransactionCalculateVm objCredit = new MoneyTransactionCalculateVm();
                            objCredit.BankId = fee.BankId;
                            objCredit.FundId = fee.FundId;
                            objCredit.InmateId = fee.InmateId;
                            objCredit.TransactionAmount = fee.VerifyAmount;
                            objCredit.TransactionType = MoneyTransactionType.CREDIT;
                            objCredit.Table = MoneyTransactionTable.ACCOUNTAO_TRANSACTION;
                            MoneyBalanceVm balance = _moneyBalanceDebitCheck.MoneyTransactionCalculateBalance(objCredit);
                            balance.InmateId = fee.InmateId;
                            balance.BankId = fee.BankId;
                            balance.FundId = fee.FundId;
                            balance.Table = MoneyTransactionTable.ACCOUNTAO_TRANSACTION;
                            _moneyBalanceDebitCheck.MoneyUpdateBalance(balance);
                            AccountAoTransaction aoTransCredit = new AccountAoTransaction();
                            aoTransCredit.AccountAoFundId = fee.FundId;
                            aoTransCredit.TransactionType = MoneyTransactionType.CREDIT.ToString();
                            aoTransCredit.InmateId = fee.InmateId;
                            aoTransCredit.TransactionAmount = fee.VerifyAmount;
                            aoTransCredit.TransactionDate = DateTime.Now;
                            aoTransCredit.TransactionDescription = accountAo.TransactionDescription;
                            aoTransCredit.TransactionReceiveCashFlag = accountAo.TransactionReceiveCashFlag;
                            aoTransCredit.TransactionReceiveNumber = accountAo.TransactionReceiveNumber;
                            aoTransCredit.TransactionReceiveFrom = accountAo.TransactionReceiveFrom;
                            aoTransCredit.TransactionReceipt = accountAo.TransactionReceipt;
                            aoTransCredit.TransactionNotes = accountAo.TransactionNotes;
                            aoTransCredit.BalanceInmate = balance.InmateBalance;
                            aoTransCredit.BalanceFund = balance.FundBalance;
                            aoTransCredit.BalanceAccount = balance.BankBalance;
                            aoTransCredit.TransactionOfficerId = accountAo.TransactionOfficerId;
                            aoTransCredit.UpdateDate = DateTime.Now;
                            aoTransCredit.UpdatedBy = _personnelId;
                            aoTransCredit.CreateDate = DateTime.Now;
                            aoTransCredit.CreatedBy = _personnelId;
                            aoTransCredit.AccountAoReceiveId = receiveId;
                            aoTransCredit.AccountAoTransactionFromId = 
                            aoTransDebit.AccountAoTransactionId > 0 ? aoTransDebit.AccountAoTransactionId : default(int?) ;
                            _context.AccountAoTransaction.Add(aoTransCredit);
                            _context.SaveChanges();
                            if(aoTransDebit.AccountAoTransactionId > 0)
                            {
                                aoTransDebit.AccountAoTransactionToId = aoTransCredit.AccountAoTransactionId;
                                _context.SaveChanges();
                            }
                            // Receive Transaction Created
                            List<int> feeIds = _context.AccountAoFee
                           .Where(w => !w.TransactionCleared.HasValue
                               && !w.TransactionVoidFlag.HasValue
                               && w.InmateId == fee.InmateId)
                           .OrderByDescending(od => od.AccountAoFund.FundAllowFeeOrder)
                           .ThenBy(o => o.TransactionDate)
                           .Select(s => s.AccountAoFeeId)
                           .ToList();
                            if (feeIds.Count > 0)
                            {
                                MoneyDebitCheckVm debitCheck = new MoneyDebitCheckVm();
                                debitCheck.TotalPayAmount = 0;
                                foreach (int f in feeIds)
                                {
                                    debitCheck.InmateId = fee.InmateId;
                                    debitCheck.FeeFlag = 0;
                                    debitCheck.DepositFlag = 1;
                                    debitCheck.FeeCheckFlag = 0;
                                    debitCheck.AccountAoFeeId = f;
                                    debitCheck.ThersholdAmount = fee.VerifyAmount;
                                    debitCheck = _moneyBalanceDebitCheck.MoneyDebitCheck(debitCheck);
                                    if (debitCheck.ReturnExitFlag == true) break;
                                };
                            }
        }
    }
}


















