using GenerateTables.Models;
using Microsoft.AspNetCore.Http;
using ScheduleWidget.Common;
using ScheduleWidget.Schedule;
using ServerAPI.Interfaces;
using ServerAPI.Utilities;
using ServerAPI.ViewModels;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;

namespace ServerAPI.Services
{
    public class ProgramClassService : IProgramClassService
    {

        private readonly AAtims _context;
        private readonly ICommonService _commonService;
        private readonly int _personnelId;

        private ClassFileInmateDetail _inmate;
        private ClassEnrollmentInmateDetails _classEnrollmentDetails;
        private List<Lookup> _lookUp;

        public ProgramClassService(AAtims context, ICommonService commonService,
            IHttpContextAccessor httpContextAccessor)
        {
            _context = context;
            _commonService = commonService;
            _personnelId = Convert.ToInt32(httpContextAccessor.HttpContext.User
                .FindFirst("personnelId")?.Value);
        }

        //ProgramClass Schedules
        public ProgramClassScheduleVm GetProgramClassSchedules(int? facilityId)
        {
            //To get Appointment Location for New Appointment Entry
            ProgramClassScheduleVm appLocationList = new ProgramClassScheduleVm
            {
                //To get Appointment Location
                LocationList = _context.Privileges
                    .Where(p => p.InactiveFlag == 0 && p.ShowInAppointments
                         && (p.FacilityId == facilityId || p.FacilityId == 0 || !p.FacilityId.HasValue))
                 .OrderBy(x => x.PrivilegeDescription)
                    .Select(p => new KeyValuePair<int, string>(p.PrivilegeId, p.PrivilegeDescription)).ToList(),

                //To get Course List
                CourseList = _context.ProgramCourse
                    .Where(x => !x.DeleteFlag)
                    .OrderBy(x => x.CourseName)
                  .Select(p => new ProgramCourseVm
                  {
                      GradeFlag = p.GradeFlag,
                      IssueGradeFlag = p.IssueGradeFlag,
                      PassNotPassFlag = p.PassNotPassFlag,
                      CertificateFlag = p.CertificateFlag,
                      Restrict1Course = p.Restrict1Course,
                      CertificateName = p.CertificateName,
                      CourseDescription = p.CourseDescription,
                      ProgramCourseId = p.ProgramCourseId,
                      CourseNumber = p.CourseNumber,
                      CourseName = p.CourseName
                  }).ToList(),

                InstructorList = GetProgramInstructorDetails(),

                CategoryList = _commonService.GetLookups(new[] { LookupConstants.PROGRAMCATEGORY }),

                ProgramClassList = _context.ProgramClass
                              .Select(p => new ProgramClassDetailsVm
                              {
                                  ProgramClassId = p.ProgramClassId,
                                  Crn = p.CRN,
                                  InactiveFlag = p.InactiveFlag,
                                  ProgramCourseId = p.ProgramCourseId
                              }).ToList()
            };
            return appLocationList;
        }

        private List<Instructor> GetProgramInstructorDetails()
        {
            List<ProgramInstructorCert> programInstructorCerts = _context.ProgramInstructorCert
                .ToList();
            int[] personnelId = _context.ProgramInstructorAssign
                .Where(a => (a.DeleteFlag == 0 || !a.DeleteFlag.HasValue))
                .Select(a => a.PersonnelId).ToArray();

            List<Instructor> instructors = _context.Personnel
                .Where(a => personnelId.All(p => p != a.PersonnelId) && a.ProgramInstructorFlag)
                .Select(a => new Instructor
                {
                    Personnel = new PersonnelVm
                    {
                        PersonnelId = a.PersonnelId,
                        PersonLastName = a.PersonNavigation.PersonLastName,
                        PersonFirstName = a.PersonNavigation.PersonFirstName,
                        OfficerBadgeNumber = a.OfficerBadgeNumber
                    },
                    DeleteFlag = programInstructorCerts.Where(p =>
                       p.PersonnelId == a.PersonnelId).Select(p => p.DeleteFlag)
                    .FirstOrDefault(),
                    ProgramInstructorCertId = programInstructorCerts.Where(p =>
                       p.PersonnelId == a.PersonnelId).Select(p => p.ProgramInstructorCertId)
                    .FirstOrDefault()
                }).OrderBy(a => a.Personnel.PersonLastName)
                .ThenBy(a => a.Personnel.PersonFirstName)
                .ThenBy(a => a.Personnel.OfficerBadgeNumber).ToList();
            return instructors;
        }

        public int InsertProgramClassSchedule(ProgramClassScheduleVm pgmClassDetails)
        {
            int programClassId = 0;
            ProgramClass programClass = new ProgramClass();

            programClass.ProgramCourseId = pgmClassDetails.ProgramClass.ProgramCourseId;
            programClass.CourseCapacity = pgmClassDetails.ProgramClass.CourseCapacity;
            programClass.CourseClassificationFilter = pgmClassDetails.ProgramClass.CourseClassificationFilter;
            programClass.CourseGenderFilter = pgmClassDetails.ProgramClass.CourseGenderFilter;
            programClass.CRN = pgmClassDetails.ProgramClass.CRN;
            programClass.ProgramInstructorString = pgmClassDetails.ProgramClass.ProgramInstructorString;

            if (pgmClassDetails.ProgramClass.ProgramClassId == 0)
            {
                _context.ProgramClass.Add(programClass);
                _context.SaveChanges();
                programClassId = programClass.ProgramClassId;
            }

            if (programClassId > 0)
            {
                pgmClassDetails.Schedule.ForEach(item =>
                {
                    ScheduleProgram appointment = new ScheduleProgram
                    {
                        CreateDate = DateTime.Now,
                        CreateBy = _personnelId,
                        LocationId = item.LocationId,
                        StartDate = item.StartDate,
                        EndDate = item.EndDate,
                        Duration = item.Duration,
                        IsSingleOccurrence = item.IsSingleOccurrence,
                        Time = item.Time,
                        DayInterval = item.DayInterval,
                        WeekInterval = item.WeekInterval,
                        FrequencyType = item.FrequencyType,
                        MonthOfYear = item.MonthOfYear,
                        DayOfMonth = item.DayOfMonth,
                        QuarterInterval = item.QuarterInterval,
                        MonthOfQuarterInterval = item.MonthOfQuarterInterval,
                        ProgramClassId = programClassId
                    };

                    _context.ScheduleProgram.Add(appointment);
                    _context.SaveChanges();
                });
            }

            return programClass.ProgramClassId;
        }

        public int UpdateProgramClassSchedule(ProgramClassScheduleVm pgmClassDetails)
        {
            ProgramClass programClass =
                _context.ProgramClass.SingleOrDefault(p =>
                    p.ProgramClassId == pgmClassDetails.ProgramClass.ProgramClassId);

            if (programClass != null)
            {
                programClass.ProgramCourseId = pgmClassDetails.ProgramClass.ProgramCourseId;
                programClass.CourseCapacity = pgmClassDetails.ProgramClass.CourseCapacity;
                programClass.CourseClassificationFilter = pgmClassDetails.ProgramClass.CourseClassificationFilter;
                programClass.CourseGenderFilter = pgmClassDetails.ProgramClass.CourseGenderFilter;
                programClass.CRN = pgmClassDetails.ProgramClass.CRN;
                programClass.ProgramInstructorString = pgmClassDetails.ProgramClass.ProgramInstructorString;

                if (pgmClassDetails.ProgramClass.ProgramClassId > 0)
                {
                    _context.ProgramClass.Update(programClass);
                    _context.SaveChanges();
                }

                if (pgmClassDetails.ProgramClass.ProgramClassId > 0)
                {
                    pgmClassDetails.Schedule.ForEach(item =>
                    {
                        ScheduleProgram appointment =
                            _context.ScheduleProgram.SingleOrDefault(s => s.ScheduleId == item.ScheduleId);

                        if (appointment != null)
                        {
                            appointment.CreateDate = DateTime.Now;
                            appointment.CreateBy = _personnelId;
                            appointment.LocationId = item.LocationId;
                            appointment.StartDate = item.StartDate;
                            appointment.EndDate = item.EndDate;
                            appointment.Duration = item.Duration;
                            appointment.IsSingleOccurrence = item.IsSingleOccurrence;
                            appointment.Time = item.Time;
                            appointment.DayInterval = item.DayInterval;
                            appointment.WeekInterval = item.WeekInterval;
                            appointment.FrequencyType = item.FrequencyType;
                            appointment.MonthOfYear = item.MonthOfYear;
                            appointment.DayOfMonth = item.DayOfMonth;
                            appointment.QuarterInterval = item.QuarterInterval;
                            appointment.MonthOfQuarterInterval = item.MonthOfQuarterInterval;
                            appointment.ProgramClassId = pgmClassDetails.ProgramClass.ProgramClassId;

                            _context.ScheduleProgram.Update(appointment);
                            _context.SaveChanges();
                        }
                    });
                }
            }
            return programClass?.ProgramClassId ?? 0;
        }
        public List<ProgramAppointmentVm> GetCurrentCourse(int facilityId, DateTime fromDate, DateTime toDate)
        {
            List<ProgramAppointmentVm> programAptList = new List<ProgramAppointmentVm>();

            List<ScheduleVm> schList = _context.ScheduleProgram.Where(a =>
                !a.DeleteFlag &&
                (a.IsSingleOccurrence && a.StartDate.Date == a.EndDate.Value.Date &&
                 fromDate.Date <= a.StartDate.Date && toDate.Date >= a.StartDate.Date ||

                 !a.IsSingleOccurrence &&
                 (fromDate.Date >= a.StartDate.Date &&
                  toDate.Date <= (a.EndDate.HasValue ? a.EndDate.Value.Date : toDate.Date) ||
                  fromDate.Date <= (a.EndDate.HasValue ? a.EndDate.Value.Date : toDate.Date) &&
                  toDate > a.StartDate.Date)

                 || a.IsSingleOccurrence && a.StartDate.Date != a.EndDate.Value.Date && a.EndDate.Value.Date >= fromDate.Date
                 )).Select(sch => new ScheduleVm
                 {
                     StartDate = sch.StartDate,
                     EndDate = sch.EndDate,
                     LocationId = sch.LocationId ?? 0,
                     ScheduleId = sch.ScheduleId,
                     Duration = sch.Duration,
                     DeleteReason = sch.DeleteReason,
                     IsSingleOccurrence = sch.IsSingleOccurrence,
                     LocationDetail = sch.LocationDetail,
                     DayInterval = sch.DayInterval,
                     WeekInterval = sch.WeekInterval,
                     FrequencyType = sch.FrequencyType,
                     QuarterInterval = sch.QuarterInterval,
                     MonthOfQuarterInterval = sch.MonthOfQuarterInterval,
                     MonthOfYear = sch.MonthOfYear,
                     DayOfMonth = sch.DayOfMonth,
                     ProgramId = sch.ProgramClassId,
                     Crn = sch.ProgramClass.CRN,
                     CourseCapacity = sch.ProgramClass.CourseCapacity,
                     ProgramCourseId = sch.ProgramClass.ProgramCourseId,
                     ProgramCourseNumber = sch.ProgramClass.ProgramCourseIdNavigation.CourseNumber,
                     ProgramCourseName = sch.ProgramClass.ProgramCourseIdNavigation.CourseName,
                     ProgramCategory = sch.ProgramClass.ProgramCourseIdNavigation.ProgramCategory,
                 }).ToList();

            //List<KeyValuePair<int, int>> keyValuePairs = schList
            //    .Select(a => new KeyValuePair<int, int>(a.ScheduleId, a.LocationId)).ToList();
            //int[] scheduleIds = (from a in schList select a.ScheduleId).ToArray();
            int[] locationIds = (from a in schList select a.LocationId).ToArray();

            List<Privileges> lstPrivileges = _context.Privileges
               .Where(l => locationIds.Contains(l.PrivilegeId)).ToList();

            foreach (ScheduleVm sch in schList)
            {
                if (sch.LocationId > 0)
                {
                    Privileges privileges = lstPrivileges.Single(p => p.PrivilegeId == sch.LocationId);
                    sch.Location = privileges.PrivilegeDescription;
                    sch.FacilityId = privileges.FacilityId ?? 0;
                }

                ScheduleBuilder schBuilder = new ScheduleBuilder();
                schBuilder.StartDate(sch.StartDate);
                if (sch.EndDate.HasValue)
                {
                    schBuilder.EndDate(sch.EndDate.Value);
                }
                else if (!sch.EndDate.HasValue && sch.IsSingleOccurrence)
                {
                    schBuilder.EndDate(sch.StartDate.Date.AddHours((sch.StartDate.TimeOfDay + sch.Duration).Hours)
                        .AddMinutes((sch.StartDate.TimeOfDay + sch.Duration).Minutes));
                }

                ISchedule materializedSchedule = schBuilder
                    .Duration(sch.Duration)
                    .SingleOccurrence(sch.IsSingleOccurrence)
                    .OnDaysOfWeek(sch.DayInterval)
                    .DuringMonth(sch.WeekInterval)
                    .HavingFrequency(sch.FrequencyType)
                    .Create();

                Debug.Assert(materializedSchedule.EndDate != null, "AppointmentService: materializedSchedule.EndDate != null");
                DateRange during = new DateRange(materializedSchedule.StartDate,
                    sch.EndDate.HasValue ? materializedSchedule.EndDate.Value : DateTime.Now.AddYears(5));

                if (materializedSchedule.IsSingleOccurrence)
                {
                    programAptList.Add(new ProgramAppointmentVm
                    {
                        StartDate = materializedSchedule.StartDate,
                        EndDate = materializedSchedule.EndDate,
                        LocationId = sch.LocationId,
                        ScheduleId = sch.ScheduleId,
                        InmateId = sch.InmateId,
                        ReasonId = sch.ReasonId,
                        TypeId = sch.TypeId,
                        Duration = materializedSchedule.EndDate - materializedSchedule.StartDate ??
                                   new TimeSpan(0, 0, 0),
                        DeleteReason = sch.DeleteReason,
                        DeleteFlag = sch.DeleteFlag,
                        DeleteDate = sch.DeleteDate,
                        DeletedBy = sch.DeleteBy,
                        Notes = sch.Notes,
                        IsSingleOccurrence = sch.IsSingleOccurrence,
                        LocationDetail = sch.LocationDetail,
                        Location = sch.Location,
                        //TrackId = sch.TrackId,
                        FacilityId = sch.FacilityId,
                        CourseName = sch.ProgramCourseName,
                        CourseNumber = sch.ProgramCourseNumber,
                        CRN = sch.Crn,
                        CourseCapacity = sch.CourseCapacity,
                        ProgramCourseId = sch.ProgramCourseId,
                        DayInterval = sch.DayInterval,
                        WeekInterval = sch.WeekInterval,
                        ProgramCategory = sch.ProgramCategory,
                        FrequencyType = sch.FrequencyType,
                        ProgramClassId = sch.ProgramId,

                    });
                }
                else
                {
                    programAptList.AddRange(materializedSchedule.Occurrences(during)
                        .Select(date => new ProgramAppointmentVm
                        {
                            StartDate = date.Date.Add(during.StartDateTime.TimeOfDay),
                            EndDate = sch.EndDate.HasValue
                                ? date.Date.Add(during.EndDateTime.TimeOfDay)
                                : date.Date.Add(during.StartDateTime.TimeOfDay).Add(sch.Duration),
                            LocationId = sch.LocationId,
                            ScheduleId = sch.ScheduleId,
                            InmateId = sch.InmateId,
                            ReasonId = sch.ReasonId,
                            TypeId = sch.TypeId,
                            Duration = materializedSchedule.Duration,
                            DeleteReason = sch.DeleteReason,
                            DeleteFlag = sch.DeleteFlag,
                            DeleteDate = sch.DeleteDate,
                            DeletedBy = sch.DeleteBy,
                            Notes = sch.Notes,
                            IsSingleOccurrence = sch.IsSingleOccurrence,
                            LocationDetail = sch.LocationDetail,
                            Location = sch.Location,
                            //TrackId = sch.TrackId,
                            FacilityId = sch.FacilityId,
                            CourseName = sch.ProgramCourseName,
                            CourseNumber = sch.ProgramCourseNumber,
                            CRN = sch.Crn,
                            CourseCapacity = sch.CourseCapacity,
                            ProgramCourseId = sch.ProgramCourseId,
                            DayInterval = sch.DayInterval,
                            WeekInterval = sch.WeekInterval,
                            ProgramCategory = sch.ProgramCategory,
                            FrequencyType = sch.FrequencyType,
                            ProgramClassId = sch.ProgramId
                        }));
                }
            }
            return programAptList;
        }

        public List<ProgramAppointmentVm> GetCurrentCourseList(int facilityId, DateTime fromDate, DateTime toDate)
        {
            DateTime todayDate = DateTime.Now;
            List<ProgramAppointmentVm> programAppList = _context.ScheduleProgram.Where(a =>
                 !a.DeleteFlag && (a.StartDate >= todayDate || (a.EndDate > todayDate && a.StartDate < todayDate))
                 ).Select(sch => new ProgramAppointmentVm
                 {
                     StartDate = sch.StartDate,
                     EndDate = sch.EndDate,
                     LocationId = sch.LocationId ?? 0,
                     ScheduleId = sch.ScheduleId,
                     Duration = sch.Duration,
                     DeleteReason = sch.DeleteReason,
                     IsSingleOccurrence = sch.IsSingleOccurrence,
                     LocationDetail = sch.LocationDetail,
                     DayInterval = sch.DayInterval,
                     WeekInterval = sch.WeekInterval,
                     FrequencyType = sch.FrequencyType,
                     QuarterInterval = sch.QuarterInterval,
                     MonthOfQuarterInterval = sch.MonthOfQuarterInterval,
                     MonthOfYear = sch.MonthOfYear,
                     DayOfMonth = sch.DayOfMonth,
                     ProgramClassId = sch.ProgramClassId,
                     CRN = sch.ProgramClass.CRN,
                     CourseCapacity = sch.ProgramClass.CourseCapacity,
                     ProgramCourseId = sch.ProgramClass.ProgramCourseId,
                     CourseNumber = sch.ProgramClass.ProgramCourseIdNavigation.CourseNumber,
                     CourseName = sch.ProgramClass.ProgramCourseIdNavigation.CourseName,
                     ProgramCategory = sch.ProgramClass.ProgramCourseIdNavigation.ProgramCategory,
                     ProgramInstructorString = sch.ProgramClass.ProgramInstructorString,
                     CourseClassificationFilter = sch.ProgramClass.CourseClassificationFilter,
                     CourseGenderFilter = sch.ProgramClass.CourseGenderFilter
                 }).ToList();
            List<int> locationIds = programAppList.Select(s => s.LocationId).ToList();
            List<Privileges> lstPrivileges = _context.Privileges
                        .Where(l => locationIds.Contains(l.PrivilegeId)).ToList();
            programAppList.ForEach(item =>
               {
                   Privileges privileges = lstPrivileges.SingleOrDefault(x => x.PrivilegeId == item.LocationId);
                   if (item.LocationId > 0)
                   {
                       item.Location = privileges.PrivilegeDescription;
                       item.FacilityId = privileges.FacilityId ?? 0;
                   }
               });

            return programAppList;
        }
        public Task<int> DeleteScheduleProgram(ProgramAppointmentVm program)
        {
            ScheduleProgram courseDetails = _context.ScheduleProgram.SingleOrDefault(p =>
                        p.ScheduleId == program.ScheduleId);
            if (program != null && courseDetails != null)
            {
                courseDetails.DeleteFlag = program.DeleteFlag;
                courseDetails.DeleteBy = _personnelId;
                courseDetails.DeleteDate = DateTime.Now;
            }

            return _context.SaveChangesAsync();
        }

        public List<InstructorsVm> GetInstructorsList()
        {
            List<InstructorsVm> lstInstructor = _context.ProgramClass.Select(s => new InstructorsVm
            {

                ProgramClassId = s.ProgramClassId,
                Instructors = s.ProgramInstructorString,
                AssignedCourses = s.ProgramCourseIdNavigation.CourseName,
                Certification = s.ProgramCourseIdNavigation.CertificateName,

            }).ToList();

            int?[] lstOfficerIds = lstInstructor.Select(s => s.Instructors).ToArray();

            List<PersonnelVm> lstByPersonnel = _context.Personnel.Where(a => lstOfficerIds.Contains(a.PersonnelId))
          .Select(a => new PersonnelVm
          {
              PersonLastName = a.PersonNavigation.PersonLastName,
              PersonFirstName = a.PersonNavigation.PersonFirstName,
              PersonMiddleName = a.PersonNavigation.PersonMiddleName,
              PersonnelId = a.PersonnelId,
              OfficerBadgeNumber = a.OfficerBadgeNum,
              PersonnelNumber = a.PersonnelNumber,

          }).ToList();
            lstInstructor.ForEach(item =>
           {
               PersonnelVm instructor = lstByPersonnel.SingleOrDefault(x => x.PersonnelId == item.ProgramClassId);
               item.InstructorsInfo = instructor;
           });
            return lstInstructor;
        }

        //To get inmate details depend on FacilityId
        private void GetInmate(int inmateId) =>
            _inmate = _context.Inmate.Where(i => i.InmateId == inmateId)
                .Select(a => new ClassFileInmateDetail
                {
                    InmateId = a.InmateId,
                    PersonId = a.PersonId,
                    FacilityId = a.FacilityId,
                    HousingUnitId = a.HousingUnitId ?? 0,

                    InmateNumber = a.InmateNumber,
                    InmateActive = a.InmateActive == 1,

                    LastReviewBy = a.LastClassReviewBy ?? 0,
                    LastReviewDate = a.LastClassReviewDate.GetValueOrDefault(),

                    InmateClassificationId = a.InmateClassificationId ?? 0,
                    InmateClassificationReason = a.InmateClassificationId.HasValue
                        ? a.InmateClassification.InmateClassificationReason
                        : string.Empty,

                    HousingUnit = new HousingDetail
                    {
                        HousingUnitId = a.HousingUnitId ?? 0,
                        FacilityId = a.HousingUnitId.HasValue ? a.HousingUnit.FacilityId : 0,
                        HousingUnitListId = a.HousingUnitId.HasValue ? a.HousingUnit.HousingUnitListId : 0,
                        HousingUnitNumber = a.HousingUnitId.HasValue ? a.HousingUnit.HousingUnitNumber : string.Empty,
                        HousingUnitLocation =
                            a.HousingUnitId.HasValue ? a.HousingUnit.HousingUnitLocation : string.Empty,
                        HousingUnitBedNumber =
                            a.HousingUnitId.HasValue ? a.HousingUnit.HousingUnitBedNumber : string.Empty,
                        HousingUnitBedLocation =
                            a.HousingUnitId.HasValue ? a.HousingUnit.HousingUnitBedLocation : string.Empty

                    },
                    Person = new PersonDetail
                    {
                        PersonId = a.PersonId,
                        PersonFirstName = a.Person.PersonFirstName,
                        PersonMiddleName = a.Person.PersonMiddleName,
                        PersonLastName = a.Person.PersonLastName
                    }
                }).SingleOrDefault();

        //Get Lookup List
        private void GetLookUpList() =>
            _lookUp = _context.Lookup.Where(x =>
                x.LookupType == LookupConstants.CLASSLINKTYPE ||
                x.LookupType == LookupConstants.ARRTYPE ||
                x.LookupType == LookupConstants.DISCINTYPE ||
                x.LookupType == LookupConstants.DISCTYPE
                ).Select(s => new Lookup
                {
                    LookupType = s.LookupType ?? string.Empty,
                    LookupDescription = s.LookupDescription ?? string.Empty,
                    LookupCategory = s.LookupCategory ?? string.Empty,
                    LookupIndex = s.LookupIndex
                }).ToList();

        //To get Inmate details for Class enrollment
        public ClassEnrollmentInmateDetails GetClassEnrollmentInmateDetails(int inmateId)
        {
            //To get data for Enrollment by Inmate
            _classEnrollmentDetails = new ClassEnrollmentInmateDetails
            {
                InmateEligibilityCnt = new InmateEligibilityCount(),
                InmateEligibilityDetails = new List<ClassLog>()
            };
            GetInmate(inmateId);
            GetLookUpList();
            GetIncidentCount(inmateId);
            GetPrivilegeCount(inmateId);
            GetAssociationCount();

            return _classEnrollmentDetails;
        }

        private void GetIncidentCount(int inmateId)
        {
            IQueryable<DisciplinaryInmate> inmateDisciplinary =
                _context.DisciplinaryInmate.Where(id => id.InmateId == inmateId && (id.DeleteFlag.HasValue || id.DeleteFlag == 0));

            //Incident Details
            _classEnrollmentDetails.InmateEligibilityDetails.AddRange(inmateDisciplinary
                .Select(id => new ClassLog
                {
                    Id = id.DisciplinaryIncident.DisciplinaryIncidentId,
                    InmateId = id.InmateId.Value,
                    ClassType = ClassTypeConstants.INCIDENT,
                    ClassDate = id.DisciplinaryIncident.DisciplinaryIncidentDate,
                    IncidentNarrative = new IncidentNarrative
                    {
                        DisciplinaryNumber = id.DisciplinaryIncident.DisciplinaryNumber,
                        DisciplinarySynopsis = id.DisciplinaryIncident.DisciplinarySynopsis,
                        DisciplinaryInmateType = id.DisciplinaryInmateType ?? 0,
                        DisciplinaryType = id.DisciplinaryIncident.DisciplinaryType ?? 0,
                        DisciplinaryTypeValue = _lookUp.SingleOrDefault(l => l.LookupIndex == id.DisciplinaryIncident.DisciplinaryType).LookupDescription,
                        DisciplinaryInmateTypeValue = _lookUp.SingleOrDefault(l => l.LookupIndex == id.DisciplinaryInmateType).LookupDescription,

                    },
                    OfficerId = id.DisciplinaryIncident.DisciplinaryOfficerId,
                    DeleteFlag = id.DeleteFlag == 1,
                    HousingDetails = new HousingDetail()
                    {
                        HousingLocation = id.DisciplinaryIncident.DisciplinaryLocation,
                        HousingUnitLocation = id.DisciplinaryIncident.DisciplinaryHousingUnitLocation,
                        HousingUnitNumber = id.DisciplinaryIncident.DisciplinaryHousingUnitNumber,
                        HousingUnitBedLocation = id.DisciplinaryIncident.DisciplinaryHousingUnitBed
                    },
                    ReportDate = id.DisciplinaryIncident.DisciplinaryReportDate,
                    ScheduleHearingDate = id.DisciplinaryScheduleHearingDate,
                    DisciplinaryHearingDate = id.DisciplinaryHearingDate,
                    ReviewDate = id.DisciplinaryReviewDate,
                    Sanction = id.DisciplinarySanction,
                    HearingComplete = id.HearingComplete

                }).ToList());

            //Incident Count Details
            _classEnrollmentDetails.InmateEligibilityCnt.Incident =
                _classEnrollmentDetails.InmateEligibilityDetails.Count(c => c.ClassType == ClassTypeConstants.INCIDENT);

        }

        private void GetPrivilegeCount(int inmateId)
        {
            IQueryable<InmatePrivilegeXref> inmatePrivilegeXref =
                _context.InmatePrivilegeXref.Where(pref => pref.InmateId == inmateId && !pref.PrivilegeRemoveDatetime.HasValue
                                                           && (!pref.PrivilegeExpires.HasValue || (pref.PrivilegeExpires >= DateTime.Now)));

            //Privilege details
            _classEnrollmentDetails.InmateEligibilityDetails.AddRange(inmatePrivilegeXref
                .Select(xref => new ClassLog
                {
                    Id = xref.InmatePrivilegeXrefId,
                    InmateId = xref.InmateId,
                    ClassDate = xref.CreateDate,
                    ClassType = ClassTypeConstants.PRIVILEGES,
                    OfficerId = xref.PrivilegeOfficerId,
                    PrivilegesNarrative = new PrivilegesNarrative
                    {
                        PrivilegeRemoveOfficerId = xref.PrivilegeRemoveOfficerId,
                        PrivilegeDate = xref.PrivilegeDate,
                        PrivilegeNote = xref.PrivilegeNote,
                        PrivilegeExpires = xref.PrivilegeExpires,
                        PrivilegeId = xref.PrivilegeId,
                        PrivilegeDescription = xref.Privilege.PrivilegeDescription,
                        PrivilegeType = xref.Privilege.PrivilegeType
                    },
                    DeleteFlag = xref.PrivilegeRemoveDatetime.HasValue
                }).ToList());

            //Privilege Count
            _classEnrollmentDetails.InmateEligibilityCnt.Privileges =
                _classEnrollmentDetails.InmateEligibilityDetails.Count(c => c.ClassType == ClassTypeConstants.PRIVILEGES);

        }

        private void GetAssociationCount()
        {
            IQueryable<PersonClassification> personClassification =
                _context.PersonClassification.Where(pc => pc.PersonId == _inmate.PersonId && pc.InactiveFlag == 0);

            //Association Count
            _classEnrollmentDetails.InmateEligibilityCnt.Assoc = personClassification.Count();

            //Association Details
            _classEnrollmentDetails.InmateEligibilityDetails.AddRange(personClassification
                .Select(person => new ClassLog
                {
                    Id = person.PersonClassificationId,
                    InmateId = _inmate.InmateId,
                    PersonId = person.PersonId,
                    ClassDate = person.PersonClassificationDateFrom,
                    OfficerId = person.CreatedByPersonnelId,
                    ClassType = ClassTypeConstants.ASSOC,
                    DeleteFlag = person.InactiveFlag == 1,
                    AssocNarrative = new AssocNarrative
                    {
                        PersonClassificationType = person.PersonClassificationType,
                        PersonClassificationSubset = person.PersonClassificationSubset,
                        PersonClassificationNotes = person.PersonClassificationNotes,
                        PersonClassificationStatus = person.PersonClassificationStatus,
                        PersonClassificationDateThru = person.PersonClassificationDateFrom,
                        PersonClassificationTypeId = person.PersonClassificationTypeId,
                        PersonClassificationSubsetId = person.PersonClassificationSubsetId,
                    }
                }).ToList());
        }

        public List<ScheduleVm> GetClassListDetails()
        {
            //To get Class List Details
            List<ScheduleVm> schList = _context.ScheduleProgram.Where(n => n.ProgramClassId.HasValue &&
            !n.DeleteFlag && !n.ProgramClass.DeleteFlag && !n.ProgramClass.InactiveFlag).Select(sch => new ScheduleVm
            {
                StartDate = sch.StartDate,
                EndDate = sch.EndDate,
                LocationId = sch.LocationId ?? 0,
                ScheduleId = sch.ScheduleId,
                Duration = sch.Duration,
                DeleteReason = sch.DeleteReason,
                IsSingleOccurrence = sch.IsSingleOccurrence,
                LocationDetail = sch.LocationDetail,
                DayInterval = sch.DayInterval,
                WeekInterval = sch.WeekInterval,
                FrequencyType = sch.FrequencyType,
                QuarterInterval = sch.QuarterInterval,
                MonthOfQuarterInterval = sch.MonthOfQuarterInterval,
                MonthOfYear = sch.MonthOfYear,
                DayOfMonth = sch.DayOfMonth,
                ProgramId = sch.ProgramClassId,
                Crn = sch.ProgramClass.CRN,
                CourseCapacity = sch.ProgramClass.CourseCapacity,
                ProgramCourseId = sch.ProgramClass.ProgramCourseId,
                ProgramCourseNumber = sch.ProgramClass.ProgramCourseIdNavigation.CourseNumber,
                ProgramCourseName = sch.ProgramClass.ProgramCourseIdNavigation.CourseName,
                ProgramCategory = sch.ProgramClass.ProgramCourseIdNavigation.ProgramCategory,
            }).ToList();
            return schList;
        }

        public EnrollmentRequest GetEnrollmentRequest(int programClassId, int locationId, int scheduleId)
        {
            IQueryable<ScheduleProgram> schedulePrograms = _context.ScheduleProgram
               .Where(w => w.LocationId == locationId && w.ScheduleId == scheduleId);

            EnrollmentRequest enrollmentRequests = new EnrollmentRequest
            {
                EnrollmentRequestDetails = _context.ProgramRequest
                    .Where(w => w.ProgramClassId == programClassId)
                    .Select(s => new EnrollmentRequestDetails
                    {
                        RequestId = s.ProgramRequestId,
                        ApprovedFlag = s.ApprovedFlag,
                        Capacity = s.ProgramClass.CourseCapacity,
                        RequestDate = s.CreateDate,
                        InmateId = s.Inmate.InmateId,
                        InmateInfo = new PersonInfoVm
                        {
                            PersonLastName = s.Inmate.Person.PersonLastName,
                            PersonFirstName = s.Inmate.Person.PersonFirstName,
                            PersonMiddleName = s.Inmate.Person.PersonMiddleName,
                            InmateNumber = s.Inmate.InmateNumber
                        },
                        HousingDetails = new HousingDetail
                        {
                            HousingUnitLocation = s.Inmate.HousingUnit.HousingUnitLocation,
                            HousingUnitNumber = s.Inmate.HousingUnit.HousingUnitNumber,
                            HousingUnitBedNumber = s.Inmate.HousingUnit.HousingUnitBedNumber,
                            HousingUnitBedLocation = s.Inmate.HousingUnit.HousingUnitBedLocation,
                            HousingUnitListId = s.Inmate.HousingUnit.HousingUnitListId
                        }
                    }).ToList(),
                EnrollmentCapacity = schedulePrograms.SingleOrDefault(s => s.Location.PrivilegeId == locationId)
                    ?.Location.Capacity
            };

            return enrollmentRequests;
        }


        public int InsertEnrollmentDetails(EnrollmentRequest enrollmentRequest)
        {

            List<ProgramClassAssign> programClassAssigns = enrollmentRequest.EnrollmentRequestDetails
                .Select(s => new ProgramClassAssign
                {
                    ScheduleId = s.ScheduleId,
                    InmateId = s.InmateId,
                    CreateBy = _personnelId,
                    CreateDate = DateTime.Now
                }).ToList();

            _context.ProgramClassAssign.AddRange(programClassAssigns);
           return _context.SaveChanges();
        }
    }

}
