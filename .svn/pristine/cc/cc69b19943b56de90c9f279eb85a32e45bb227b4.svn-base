using System;
using ServerAPI.ViewModels;
using System.Linq;
using GenerateTables.Models;
using Microsoft.AspNetCore.Http;
using System.Collections.Generic;

namespace ServerAPI.Services
{
    public class MoneyClearService : IMoneyClearService
    {
        private readonly AAtims _context;
        private readonly int _personnelId;
        private readonly IMoneyService _moneyService;
        private readonly IMoneyVoidService _moneyVoidService;
        public MoneyClearService(AAtims context, IHttpContextAccessor httpContextAccessor, IMoneyService moneyService, IMoneyVoidService moneyVoidService)
        {
            _context = context;
            _personnelId = Convert.ToInt32(httpContextAccessor.HttpContext.User
                .FindFirst("personnelId")?.Value);
            _moneyService = moneyService;
            _moneyVoidService = moneyVoidService;
        }

        //To get the Money-Clear-Clear-List Details
        public MoneyClearDetailsVm GetMoneyClearClearDetails(MoneyClearVm searchValue)
        {
            MoneyClearDetailsVm moneyClearList = new MoneyClearDetailsVm();
            moneyClearList.LoadBankDetails = _moneyService.MoneyGetBank();
            moneyClearList.LoadFundDetails = _moneyService.MoneyGetFund();

            moneyClearList.GetMoneyClear = _context.AccountAoTransaction
                .Where(w => w.AccountAoFund.AccountAoBankId == searchValue.BankId
                        && (searchValue.FundId == 0 || w.AccountAoFundId == searchValue.FundId)
                        && !w.TransactionCleared.HasValue
                        && !String.IsNullOrEmpty(w.TransactionCheckNumber)
                        && (String.IsNullOrEmpty(searchValue.CheckNo) ? (w.TransactionDate.Value.Date >= searchValue.FromDate.Value.Date &&
                        w.TransactionDate.Value.Date <= searchValue.ToDate.Value.Date) : w.TransactionCheckNumber == searchValue.CheckNo))
                        .Select(s => new MoneyClearVm
                        {
                            AccountAoTransactionId = s.AccountAoTransactionId,
                            TransactionDate = s.TransactionDate,
                            TransactionDescription = s.TransactionDescription,
                            TransactionCheckNumber = s.TransactionCheckNumber,
                            InmateNumber = s.Inmate.InmateNumber,
                            PersonDetails = new PersonVm
                            {
                                PersonLastName = s.Inmate.Person.PersonLastName,
                                PersonFirstName = s.Inmate.Person.PersonFirstName,
                                PersonMaidenName = s.Inmate.Person.PersonMaidenName,
                                PersonSuffix = s.Inmate.Person.PersonSuffix,
                            },
                            TransactionAmount = s.TransactionAmount,
                            TransactionVoidFlag = s.TransactionVoidFlag == 1,
                            InmateBalance = s.BalanceInmate,
                            FundBalance = s.BalanceFund,
                            AccountBalance = s.BalanceAccount,
                            PersonnelDetails = new PersonnelVm
                            {
                                PersonLastName = s.TransactionOfficer.PersonNavigation.PersonLastName,
                                PersonFirstName = s.TransactionOfficer.PersonNavigation.PersonFirstName
                            }
                        }).OrderByDescending(o => o.AccountAoTransactionId).ToList();
            return moneyClearList;
        }

        //To do the DoTransaction in Money-Clear-Clear-List Details
        public int UpdateMoneyClearClearTransaction(List<int> checkedTransIdList)
        {
            List<AccountAoTransaction> accountAoTransaction = _context.AccountAoTransaction
            .Where(w => checkedTransIdList.Contains(w.AccountAoTransactionId)
             && (!w.TransactionCleared.HasValue || w.TransactionCleared == 0)).ToList();

            //Update the AccountAOTransaction table
            accountAoTransaction.ForEach(f =>
            {
                f.TransactionCleared = 1;
                f.TransactionClearedBy = _personnelId;
                f.TransactionClearedDate = DateTime.Now;
                f.UpdateDate = DateTime.Now;
                f.UpdatedBy = _personnelId;
            });
            return _context.SaveChanges(); ;
        }

        //To do the DoVoid in Money-Clear-Clear-List Details
        public MoneyAccountVoidDetailsVm DoVoidMoneyClearClear(int transId, MoneyAccountTransactionFlagType pFlag)
        {
            MoneyAccountVoidDetailsVm moneyClearDetails = _moneyVoidService.GetDoVoidDetails(transId, pFlag);
            return moneyClearDetails;
        }
    }
}